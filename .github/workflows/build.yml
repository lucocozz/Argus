name: Build

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }}/${{ matrix.compiler }}/regex${{ matrix.regex && '-yes' || '-no' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        compiler: [gcc, clang]
        build_type: [release]
        regex: [true, false]
        
        include:
          - os: ubuntu-latest
            compiler: gcc
            build_type: release
            regex: true
            examples: true
          - os: ubuntu-latest
            compiler: gcc
            build_type: release
            regex: false
            examples: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libpcre2-dev
          python -m pip install --upgrade pip
          pip install 'meson>=1.0.0'

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install meson ninja pcre2

      - name: Configure Meson
        run: |
          examples_opt="${{ matrix.examples == true && '-Dexamples=true' || '-Dexamples=false' }}"
          meson setup .build --buildtype=${{ matrix.build_type }} -Dregex=${{ matrix.regex }} $examples_opt
        env:
          CC: ${{ matrix.compiler }}
          CXX: ${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}
        shell: bash

      - name: Build
        run: meson compile -C .build
        env:
          CC: ${{ matrix.compiler }}
          CXX: ${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}

      - name: Test basic functionality
        if: matrix.examples == true
        run: |
          if [ -f ".build/examples/basic_usage" ]; then
            .build/examples/basic_usage --help
            echo "✅ Basic example test passed"
          else
            echo "❌ Basic example not found, smoke test failed"
            exit 1
          fi
          
          if [ -f ".build/examples/regex" ]; then
            echo "Testing regex example with regex=${{ matrix.regex }}"
            if [ "${{ matrix.regex }}" = "true" ]; then
              # With regex enabled, should work normally
              .build/examples/regex --email="user@example.com" || { echo "❌ Regex example failed with regex enabled"; exit 1; }
              echo "✅ Regex example passed with regex enabled"
            else
              # With regex disabled, should display appropriate message without crashing
              output=$(.build/examples/regex --email="user@example.com" 2>&1) || true
              if echo "$output" | grep -q "regex support is not available"; then
                echo "✅ Regex example correctly handled disabled regex"
              else
                echo "❌ Regex example didn't correctly handle disabled regex"
                echo "Output: $output"
                exit 1
              fi
            fi
          else
            echo "⚠️ Regex example not found, skipping test"
          fi
        shell: bash

      # Upload artifacts for release builds
      - name: Upload library artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-${{ matrix.os }}-${{ matrix.compiler }}-regex${{ matrix.regex && '-yes' || '-no' }}
          path: |
            .build/source/libargus.a
            .build/source/libargus.so
            .build/source/libargus.dylib
          if-no-files-found: ignore
